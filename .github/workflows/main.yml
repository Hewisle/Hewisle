# This is a basic workflow to help you get started with Actions

name: Web deploy

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  Production:
    environment: Production
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2

      - name: Authenticate
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-add - <<< "${{ secrets.SERVER_SSH_KEY }}"

      - name: Package get cache directory
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
        
      - name: Package get cache
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Package install
        run: yarn install --production
    
      - name: Build
        run: npx quasar build -m ssr

      - name: Deploy
        env:
          USERNAME: ${{ secrets.USERNAME }}
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_PORT: ${{ secrets.SERVER_PORT }}
          SERVER_DESTINATION: ${{ secrets.SERVER_DESTINATION }}
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
          FOLDER: "./dist/ssr"
        run: sh -c "rsync -r --delete --exclude=node_modules -e 'ssh -p $SERVER_PORT -o StrictHostKeyChecking=no' $GITHUB_WORKSPACE/$FOLDER $USERNAME@$SERVER_IP:$SERVER_DESTINATION"
      - name: Remote package install
        env:
          USERNAME: ${{ secrets.USERNAME }}
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_PORT: ${{ secrets.SERVER_PORT }}
          SERVER_DESTINATION: ${{ secrets.SERVER_DESTINATION }}
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
          FOLDER: "ssr"
        run: sh -c "ssh $USERNAME@$SERVER_IP -p $SERVER_PORT -o StrictHostKeyChecking=no 'cd $SERVER_DESTINATION/$FOLDER; yarn install --production'"
